---
title: "Comparative Analysis of Wearable NeuroSkin and Non-Wearable GAITRite Sensor Systems for Gait Assessment in Healthy People"

execute: 
  message: false
  warning: false
  cache: true
  
format:
  html:
    toc: true
    toc-depth: 3
    toc-expand: 2
    toc-location: left-body
    lightbox: true
    link-external-newwindow: true
    link-external-icon: true
    code-fold: true
    code-summary: "Show the code"
    other-links:
      - text: Manuscript
        href: https://data.nasa.gov/
      - text: Definition of gait parameters
        href: https://www.tekscan.com/blog/medical/gait-cycle-phases-parameters-evaluate-technology
    # include-in-header:
    #   - text: |
    #     <link rel = "shortcut icon" href = "../kurage_logo_cropped.jpeg" />
---

# Literature {#sec-literature}

Meta-analysis of 32 publications (44 studies) across 4 walkway systems (including 39 studies with GAITrite): Parati et al. 2022 ([doi](doi.org/10.23736/S1973-9087.22.07037-X))

-   21 (resp. 23) studies with intra-session (resp. inter-session) test-retest

-   meta-analytic ICC of gait speed = 0.92 \[0.90, 0.94\] (fig. 3)

-   ICC is equally good across most measures and conditions (fig. 4)

Concurrent validity study between GAITrite and a tri-axial accelerometer: Byun et al. 2016 ([doi](doi.org/10.1371/journal.pone.0158956)):

-   82 subjects, 4.5m GAITrite, 4x2 trials

-   step time and cadence have excellent ICC with only 8 steps, and very good with only 4-5 (fig. 3)

-   ICC between the 2 devices is excellent (\>0.90, reported for general parameters only, fig. 4)

Authoritative methodological paper on ICC: Koo & Li 2016 ([doi](https://doi.org/10.1016/j.jcm.2016.02.012))\
=\> résumé en français sur [Datanovia](https://www.datanovia.com/en/fr/lessons/coefficient-de-correlation-intra-classe-dans-r)

# Analysis

## Libraries & settings

```{r}

# Stats
library(psych)      # ICC, consistency only!!
library(irr)        # ICC, absolute agreement
library(boot)       # bootstrapping
library(car)        # bootstrapping confidence intervals
library(TOSTER)     # equivalence testing (TOST)
library(BayesFactor)

# Visualization
library(DT)         # interactive data tables
library(ggh4x)      # advanced customization of ggplots

# Data wrangling
library(magrittr)   # advances piping operators such as %$%
library(tidyverse)  # data loading & wrangling; loaded last to avoid functions being masked by other packages


# ggplot2 theme
theme_set(theme_minimal()) # lean theme for ggplots

# DT interactive tables options
# options(DT.options = list(dom = 'pilt'))
display_DT <- function(data, nDecimals = 3, pageLength = 9) {
  data %>% 
    mutate(across(where(is.numeric), ~round(.,nDecimals))) %>% 
    mutate(across(where(is.character), as.factor)) %>%  
    datatable(filter = "top",
              options = list(#dom = 'pilt',
                             pageLength = pageLength)) %>% 
    return()
}

# Paths
path.data <- file.path("./data")
```

## Load data

```{r}
process_1file <- function(file) {
  file %>% 
    # --- load the csv file
    read_delim(delim = ";", skip = 1,
               col_names = c("GAITRite","NeuroSkin"),
               col_types = "cc") %>% 
    # --- replace the comma decimal symbol by a dot
    mutate(across(c(GAITRite, NeuroSkin), ~as.numeric(str_replace(.,",",".")))) %>% 
    # --- extract side and metric from the filename
    mutate(file_name = str_extract(basename(file), "(?<=\\().*?(?=\\))")) %>% 
    separate(file_name, into = c("side", "metric"), sep = "_", extra = "merge") %>% 
    # --- homogenize string case
    mutate(across(metric, str_to_sentence)) %>% 
    # --- add subject id
    mutate(id = paste0("S",row_number())) %>% 
    # --- reorder columns
    select(id, metric, side, everything())
}

csv_files <- list.files(path = path.data, pattern = "\\.csv$", # list all csv in th path.data
                        full.names = TRUE)

# Apply the file processing to all listed files 
df <- map_dfr(csv_files, process_1file)

# Append average of Left and Right
df %<>% 
  gather(key = device, value = value, GAITRite, NeuroSkin) %>% 
  group_by(id, metric, device) %>% 
  summarise(value = mean(value)) %>% 
  mutate(side = "Avg") %>% 
  spread(device, value) %>%
  ungroup %>% 
  bind_rows(df) %>% 
  distinct


df %>% group_by(metric, side) %>% summarise(across(is.numeric, mean))
# Only for testing  of helper functions used in ICC, TOST, etc.:
data <- df %>% filter(side == "Right", metric == "Swing_time") %>% select(-id)


```

## Correlations

### Plot

Phase parameters do not correlate between the two devices: this is reflected in negative ICC for these parameters (see [ICC](#sec-icc))

```{r}
#| fig-width: 18
#| fig-height: 6
#| fig-cap: "Click figure to enlarge"
#| column: screen-inset

ggplot(df, aes(x = NeuroSkin, y = GAITRite)) +
  facet_grid2(side ~ metric, scales = "free", independent = "all") +
  geom_abline(slope = 1, intercept = 0, linetype = 2, color = "grey70") +
  geom_point() +
  geom_smooth(method = "lm") +
  coord_cartesian(clip = "off") +
  theme(strip.background = element_rect(color = "black", fill = NA),
        strip.clip = "off")
```

### Simulations

Using simulations, we demonstrate that taking the ratios of 2 variables, each being highly correlated across devices, destroys completely the correlation:

```{r}
#| cache: true

library(mvnfast)  # to generate correlated variables

simcor <- function(n, mu = 0, sd = 1, cor) {
  x <- rmvn(n = n,
            mu = c(mu, mu),
            sigma = matrix(c(sd^2, cor * sd^2, cor * sd^2, sd^2), nrow = 2))
  x1 <- x[, 1]
  x2 <- x[, 2]
  
  
  y <- rmvn(n = n,
            mu = c(mu, mu),
            sigma = matrix(c(sd^2, cor * sd^2, cor * sd^2, sd^2), nrow = 2))
  y1 <- y[, 1]
  y2 <- y[, 2]

  cor.test(x1, x2) |> print()
  cor.test(y1, y2) |> print()
  cor.test(x1/y1, x2/y2) |> print()
}

simcor(n = 1000, cor = 0.9)
```

## Redundancies in gait parameters

Reference: <https://www.tekscan.com/blog/medical/gait-cycle-phases-parameters-evaluate-technology>

### Speed = step length / step time

```{r}
df %>% 
  filter(side == "Avg",
         metric %in% c("Speed","Step_length", "Step_time")) %>% 
  group_by(metric) %>% #mutate(id = row_number(), .before = 1) %>% 
  gather(key = device, value = value, GAITRite, NeuroSkin) %>% 
  spread(key = metric, value = value) %>% 
  mutate(SpeedCalc = Step_length/Step_time, .after = Speed) %>% 
  # mutate(`equal?` = as.numeric(abs(Speed - Step_length/Step_time) <= .02)) %>% 
  arrange(device) %>%
  display_DT
```

### Stride/Cycle = 2x step

In theory, 1 stride = 2 steps, which should be reflected in both the time and length metrics.

In practice, it is almost never the case in data and discrepancies can not always be explained by rounding errors, suggesting that they are computed independently:

```{r}
df %>% 
  filter(metric %in% c("Cycle_time", "Step_time")) %>% 
  group_by(side, metric) %>% #mutate(id = row_number(), .before = 1) %>% 
  gather(key = device, value = value, GAITRite, NeuroSkin) %>% 
  spread(key = metric, value = value) %>% 
  mutate(`equal?` = as.numeric(abs(Cycle_time - 2*Step_time) <= .02)) %>% 
  arrange(device, side) %>%
  display_DT

df %>% 
  filter(metric %in% c("Stride_length", "Step_length")) %>% 
  group_by(side, metric) %>%  #mutate(id = row_number(), .before = 1) %>% 
  gather(key = device, value = value, GAITRite, NeuroSkin) %>% 
  spread(key = metric, value = value) %>% 
  mutate(`equal?` = as.numeric(abs(Stride_length - 2*Step_length) <= .02)) %>% 
  arrange(device, side) %>%
  display_DT
```

### Stance phase = Stance time / Cycle time

In theory, stance phase is the proportion of cycle time spent in stance.

In practice, there are small discrepancies that could be explained by rounding errors.

```{r}
#| column: page-right

df %>% 
  filter(metric %in% c("Stance_phase", "Stance_time", "Cycle_time")) %>% 
  group_by(side, metric) %>% mutate(id = row_number(), .before = 1) %>% 
  gather(key = device, value = value, GAITRite, NeuroSkin) %>% 
  spread(key = metric, value = value) %>% 
  mutate(stance_by_cycle = round(100 * Stance_time / Cycle_time, 3)) %>% 
  mutate(`equal?` = as.numeric(Stance_phase == stance_by_cycle)) %>% 
  arrange(device, side) %>%
  display_DT
```

### Swing phase = Swing time / Cycle time

In theory, stance phase is the proportion of cycle time spent in stance.

In practice, there are small discrepancies that could be explained by rounding errors.

```{r}
#| column: page-right

df %>% 
  filter(metric %in% c("Swing_phase", "Swing_time", "Cycle_time")) %>% 
  group_by(side, metric) %>% mutate(id = row_number(), .before = 1) %>% 
  gather(key = device, value = value, GAITRite, NeuroSkin) %>% 
  spread(key = metric, value = value) %>% 
  mutate(swing_by_cycle = round(100 * Swing_time / Cycle_time, 3)) %>% 
  mutate(`equal?` = as.numeric(Swing_phase == swing_by_cycle)) %>% 
  arrange(device, side) %>%
  display_DT

```

### Swing phase = single support phase

In theory, swing phase = single support phase (same definitions).

In practice, it is never the case in the data, and discrepancies can not be explained by rounding errors:

```{r}
#| column: page-right

df %>% 
  filter(metric %in% c("Swing_phase", "Single_support_phase")) %>% 
  group_by(side, metric) %>%  mutate(id = row_number(), .before = 1) %>% 
  gather(key = device, value = value, GAITRite, NeuroSkin) %>% 
  spread(key = metric, value = value) %>% 
  mutate(`equal?` = as.numeric(round(abs(Swing_phase - Single_support_phase),1) <= 0.1)) %>% 
  arrange(device, side) %>%
  display_DT
```

### Stance phase = Single + Double support phases

In theory, stance phase = single + double support phase, but this only the case for NeuroSkin (up to rounding error), suggesting that the two devices differ in how they compute these gait parameters:

```{r}
#| column: page-right

df %>% 
  filter(metric %in% c("Stance_phase", "Single_support_phase", "Double_support_phase")) %>% 
  group_by(side, metric) %>% mutate(id = row_number(), .before = 1) %>% 
  gather(key = device, value = value, GAITRite, NeuroSkin) %>% 
  spread(key = metric, value = value) %>% 
  mutate(single_plus_double = round(Single_support_phase + Double_support_phase, 2),
         .keep = "unused") %>% 
  mutate(`equal?` = as.numeric(round(abs(single_plus_double - Stance_phase),2) <= 0.01)) %>% 
  arrange(device, side) %>%
  display_DT

```

## ICC

Intraclass coefficient (ICC) is the most widely reported measure for test-retest performance of, and device comparisons with, the GAITRite (see [meta-analysis](#sec-literature))

### Helper function

```{r}
compute_icc <- function(data) {
  # Apply ICC() function from psych package
  icc_result <- psych::ICC(data %>% select(-c(metric, side)), lmer = FALSE)
  # Apply icc() function from irr package
  irr_result <- irr::icc(data %>% select(-c(metric, side)), model = "twoway", unit = "single", type = "agreement")

  icc_result$results %>%
    as_tibble() %>%
    filter(type == "ICC3") %>% 
    select(-p) %>%
    mutate(metric = unique(data$metric),
           side = unique(data$side),
           .before = 1) 
  
  tibble(metric = unique(data$metric),
         side = unique(data$side),
         type = "ICC(3,1)",
         ICC = irr_result$value,
         `CI low` = irr_result$lbound,
         `CI high` = irr_result$ubound) %>% 
    return()
}

# psych::ICC() calculates consistency, not absolute agreement
# icc_result; irr_result <- irr::icc(data %>% select(-c(metric, side)), model = "twoway", unit = "single", type = "agreement")

```

### Compute {#sec-icc}

```{r}
# Pearson correlation
df.cor <- df %>% 
  filter(!grepl("phase",metric)) %>% 
  group_split(metric,side) %>% 
  map_dfr(~ mutate(as.data.frame(as.table(cor(.x$GAITRite, .x$NeuroSkin))),
                   correlation = round(Freq, 3),
                   metric = unique(.$metric),
                   side = unique(.$side),
                   .before = 1)) %>% 
  select(-Var1, -Freq)

# ICC
df.icc <- df %>% 
  filter(!grepl("phase",metric)) %>% 
  select(-id) %>% 
  group_split(metric,side) %>% 
  map_dfr(~ compute_icc(.x)) %>% 
  mutate(across(is.numeric, ~round(.,3))) %>% 
  # --- append correlation coefficients
  left_join(df.cor, by = c("metric","side"))

```

```{r}
#| column: page-right
#| cache: false

# Bind & print in interactive table
df.icc %>% 
  display_DT(nDecimals = 2)
```

## Absolute relative errors

A good absolute measure of how well NeuroSkin matches GAITRite is absolute relative error (ARE) \[link\](<https://oecd.ai/en/catalogue/metrics/absolute-relative-error-are>)

Because of the highly non-normal distribution of ARE, estimates and confidence intervals should be computed by bootstrapping.

### Helper functions

```{r}
# Mean function with parametrization tailored to boot::boot()
mean.bootfn <- function(data, ind.samples, var.name) {
  return(mean(data[c(ind.samples),][[var.name]]))
}

# Function to generate bootstrap distributions, and extract median & CI
compute_abserror_bootci <- function(data, n = 1000) {
  bt <- boot::boot(data, statistic = mean.bootfn, R = n, var.name = "abserror")
  ci <- confint(bt, level = .95, type = 'bca') %>%
    as_tibble() %>% 
    rename(boot.ci.low = `2.5 %`,
           boot.ci.high = `97.5 %`)
  
  return(bind_cols(tibble(boot.median = median(bt$t)),
                   ci))
}
```

### Data per participant

```{r}
#| column: page-right
#| cache: false

# Calculate relative errors
df.error <- df %>% 
  mutate(error = 100*(NeuroSkin-GAITRite)/GAITRite,
         abserror = abs(error))

# Print data in interactive table
df.error %>%
  filter(!grepl("phase",metric)) %>% 
  display_DT

```

### Bootstrap median & CIs

Compute :

```{r}
df.bootci <- df.error %>%
  filter(!grepl("phase",metric)) %>% 
  group_split(metric,side) %>%  # Split by group
  map_dfr(~ mutate(compute_abserror_bootci(., n = 5000),
                   metric = unique(.$metric),
                   side = unique(.$side),
                   .before = 1))
```

Display results in interactive table:

```{r}
#| column: page-right
#| cache: false

df.bootci %>% 
  display_DT(nDecimals = 1)
```

```{r}
#| include: false
knitr::knit_exit()
```

## TOST

### Helper functions

We use the generic function `tsum_TOST()` from the `{TOSTER}` package by Daniel Lakens

```{r}

# Values from Mael's document
eqb.mael <- list("Step_length" = 2.7,
                 "Step_time" = 0.025,
                 "Cycle_time" = 0.03,
                 "Stride_length" = 2.5,
                 "Swing_time" = 0.03,
                 "Stance_time" = 0.05,
                 "Swing_phase" = 2.5,
                 "Stance_phase" = 2.5,
                 "Single_support_phase" = 2,
                 "Double_support_phase" = 3
)


compute_TOST <- function(data, eqb_mode = "Mael") {
  
  # Select/calculate equivalence boundaries
  if (tolower(as.character(eqb_mode)) == "mael") {
    eqb = eqb.mael[[unique(data$metric)]] # Mael bounds
  } else if (is.numeric(eqb_mode)) {
    eqb = eqb_mode*mean(data$GAITRite) # bounds = X% of GAITRite mean
  }
  
  # Apply TOST
  res.tost <- data %$% 
    TOSTER::tsum_TOST(m1 = mean(GAITRite-NeuroSkin),
                      sd1 = sd(GAITRite-NeuroSkin),
                      n1 = length(GAITRite-NeuroSkin),
                      eqb = eqb
    )
  
  # Calculate BF
  ttestBF(data$GAITRite, data$NeuroSkin, nullInterval = eqb*c(-1,1), paired = TRUE)
  ttestBF(data$GAITRite, data$NeuroSkin, paired = TRUE)

  # Build output
  out <- c()
  
  out$TOST <- res.tost$TOST %>% 
    select(p.value) %>% 
    rownames_to_column %>% 
    spread(key = rowname, value = p.value) %>% 
    mutate(metric = unique(data$metric),
           side = unique(data$side),
           .before = 1)
  
  return(out$TOST)
}
```

### Reproduce Mael's results with ChatGPT equivalence boundaries

p-values are exactly reproduced.

But these boundaries are inconsistent with data, e.g. it's narrower for the single than for the double support phase , although gait values are higher for single than double.

```{r}
#| column: page-right

df.tost.mael <- df %>%
  group_split(metric,side) %>%  # Split by group
  map_dfr(~ compute_TOST(.x, eqb_mode = "Mael"))

df.tost.mael %>% 
  mutate(across(is.numeric, ~round(.,3))) %>%
  datatable(filter = "top")
```

### Equivalence boundaries = +/- 5% of mean GAITRite values

```{r}
#| column: page-right

df.tost.5perc <- df %>%
  group_split(metric,side) %>%  # Split by group
  map_dfr(~ compute_TOST(.x, eqb_mode = 0.05))

df.tost.5perc %>% 
  mutate(across(is.numeric, ~round(.,3))) %>%
  datatable(filter = "top")
```
