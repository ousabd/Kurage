---
title: "Comparative Analysis of Wearable NeuroSkin and Non-Wearable GAITRite Sensor Systems for Gait Assessment in Healthy People"
format:
  html:
    toc: true
    toc-depth: 3
    toc-expand: 2
    lightbox: true
    link-external-newwindow: true
---

# Literature {#sec-literature}

Meta-analysis of 32 publications (44 studies) across 4 walkway systems (including 39 studies with GAITrite): [doi](doi.org/10.23736/S1973-9087.22.07037-X)

-   21 (resp. 23) studies with intra-session (resp. inter-session) test-retest

-   meta-analytic ICC of gait speed = 0.92 \[0.90, 0.94\] (fig. 3)

-   ICC is equally good across most measures and conditions (fig. 4)

Concurrent validity study between GAITrite and a tri-axial accelerometer ([doi](doi.org/10.1371/journal.pone.0158956)):

-   82 subjects, 4.5m GAITrite, 4x2 trials

-   step time and cadence have excellent ICC with only 8 steps, and very good with only 4-5 (fig. 3)

-   ICC between the 2 devices is excellent (\>0.90, reported for general parameters only, fig. 4)

# Analysis

## Libraries

```{r}
library(ggh4x)
library(magrittr)
library(DT)
library(tidyverse)

```

```{r}
path.data <- file.path("./data")
```

## Data

### Load

```{r}
process_1file <- function(file) {
    file %>% 
        read_delim(delim = ";", skip = 1,
                col_names = c("GAITRite","NeuroSkin"),
                col_types = "cc") %>% 
        mutate(across(c(GAITRite, NeuroSkin), ~as.numeric(str_replace(.,",",".")))) %>% 
        mutate(file_name = str_extract(basename(file), "(?<=\\().*?(?=\\))")) %>% 
        separate(file_name, into = c("side", "metric"), sep = "_", extra = "merge")
}

csv_files <- list.files(path = path.data, pattern = "\\.csv$", full.names = TRUE)

df <- map_dfr(csv_files, process_1file)
```

### Plot correlations

Phase parameters do not correlate between the two devices: this is reflected in negative ICC for these parameters (see \[ICC\](\@sec-icc)

```{r}
#| fig-width: 18
#| fig-height: 4
#| fig-cap: "Click figure to enlarge"
theme_set(theme_minimal())

ggplot(df, aes(x = NeuroSkin, y = GAITRite)) +
  facet_grid2(side ~ metric, scales = "free", independent = "all") +
  geom_point() +
  geom_smooth(method = "lm") +
  coord_cartesian(clip = "off") +
  theme(strip.background = element_rect(color = "black", fill = NA),
        strip.clip = "off")


```

### Redundancies in gait parameters

Reference: <https://www.tekscan.com/blog/medical/gait-cycle-phases-parameters-evaluate-technology>

In theory, swing phase = single support phase (same definitions), but this is never the case in the data:

```{r}
df %>% 
  filter(metric %in% c("Swing_phase", "Single_support_phase")) %>% 
  group_by(side, metric) %>%  mutate(id = row_number(), .before = 1) %>% 
  gather(key = device, value = value, GAITRite, NeuroSkin) %>% 
  spread(key = metric, value = value) %>% 
  mutate(test = as.numeric(Swing_phase == Single_support_phase)) %>% 
  arrange(device, side) %>%
  datatable(filter = "top",
            options = list(pageLength = 9))
```

In theory, stance phase = single + double support phase, but this only the case for NeuroSkin, suggesting that the two devices differ in how they compute these gait parameters:

```{r}
df %>% 
  filter(metric %in% c("Stance_phase", "Single_support_phase", "Double_support_phase")) %>% 
  group_by(side, metric) %>% mutate(id = row_number(), .before = 1) %>% 
  gather(key = device, value = value, GAITRite, NeuroSkin) %>% 
  spread(key = metric, value = value) %>% 
  mutate(single_plus_double = round(Single_support_phase + Double_support_phase, 2),
         .keep = "unused") %>% 
  mutate(`equality?` = as.numeric(single_plus_double == Stance_phase)) %>% 
  arrange(device, side) %>%
  datatable(filter = "top",
            options = list(pageLength = 9))

```

## ICC

Intraclass coefficient (ICC) is the most widely reported measure for test-retest performance of, and device comparisons with, the GAITRite (see [meta-analysis](#sec-literature))

### Libraries & functions

```{r}
library(psych)

compute_icc <- function(data) {
  # Apply ICC function from psych package
  icc_result <- ICC(data %>% select(-c(metric, side)), lmer = FALSE)
  
  icc_result$results %>%
    as_tibble() %>%
    filter(type == "ICC3") %>% 
    mutate(metric = unique(data$metric),
           side = unique(data$side),
           .before = 1) %>% 
    return()
}

```

### Compute {#sec-icc}

```{r}

# Pearson correlation
df.cor <- df %>% 
  group_split(metric,side) %>% 
  map_dfr(~ mutate(as.data.frame(as.table(cor(.x$GAITRite, .x$NeuroSkin))),
                   cor = round(Freq, 3),
                   metric = unique(.$metric),
                   side = unique(.$side),
                   .before = 1)) %>% 
  select(-Var1, -Freq)

# ICC
df.icc <- df %>% 
  group_split(metric,side) %>% 
  map_dfr(~ compute_icc(.x)) %>% 
  select(-p) %>%
  mutate(across(is.numeric, ~round(.,3)))

# Bind & print in interactive table
left_join(df.icc, df.cor, by = c("metric","side")) %>% 
  datatable(filter = "top")
```

## Absolute relative errors

A good absolute measure of how well NeuroSkin matches GAITRite is absolute relative error (ARE) \[link\](<https://oecd.ai/en/catalogue/metrics/absolute-relative-error-are>)

Because of the highly non-normal distribution of ARE, estimates and confidence intervals should be computed by bootstrapping.

### Libraries & functions

```{r}
library(boot)
library(car)

# Mean function with parametrization tailored to boot::boot()
mean.bootfn <- function(data, ind.samples, var.name) {
  return(mean(data[c(ind.samples),][[var.name]]))
}

# Function to generate bootstrap distributions, and extract median & CI
compute_abserror_bootci <- function(data, n = 1000) {
  bt <- boot::boot(data, statistic = mean.bootfn, R = n, var.name = "abserror")
  ci <- confint(bt, level = .95, type = 'bca') %>%
    as_tibble() %>% 
    rename(boot.ci.low = `2.5 %`,
           boot.ci.high = `97.5 %`)
  
  return(bind_cols(tibble(boot.median = median(bt$t)),
                   ci))
}

```

### Compute

```{r}
# Calculate relative errors
df.error <- df %>% 
  mutate(error = 100*(NeuroSkin-GAITRite)/GAITRite,
         abserror = abs(error))

# Print data in interactive table
df.error %>%
  datatable(filter = "top",
            options = list(pageLength = 9))

# Compute boot median & CI for all
df.bootci <- df.error %>%
  # filter(side == "Right", metric == "Cycle_Time") %>% 
  group_split(metric,side) %>%  # Split by group
  map_dfr(~ mutate(compute_abserror_bootci(., n = 1000),
                   metric = unique(.$metric),
                   side = unique(.$side),
                   .before = 1))

# Print results in interactive table
df.bootci %>% 
  mutate(across(is.numeric, ~round(.,3))) %>% 
  datatable(filter = "top")
```

## TOST

### Libraries & functions

We use the generic function `tsum_TOST()` from the `{TOSTER}` package by Daniel Lakens

```{r}
library(TOSTER)

compute_TOST <- function(data, eqb_mode = "Mael") {
  
  if (tolower(as.character(eqb_mode)) == "mael") {
    eqb = eqb.mael[[unique(data$metric)]] # Mael bounds
  } else if (is.numeric(eqb_mode)) {
    eqb = eqb_mode*mean(data$GAITRite) # bounds = X% of GAITRite mean
  }
  
  out <- data %$% 
    TOSTER::tsum_TOST(m1 = mean(GAITRite-NeuroSkin),
                      sd1 = sd(GAITRite-NeuroSkin),
                      n1 = length(GAITRite-NeuroSkin),
                      eqb = eqb
    )
  
  out$TOST %>% 
    select(p.value) %>% 
    rownames_to_column %>% 
    spread(key = rowname, value = p.value) %>% 
    mutate(metric = unique(data$metric),
           side = unique(data$side),
           .before = 1) %>% 
    return()
}
```

### Reproduce Mael's results with ChatGPT equivalence boundaries

p-values are exactly reproduced.

But these boundaries are inconsistent with data, e.g. it's narrower for the single than for the double support phase , although gait values are higher for single than double.

```{r}

eqb.mael <- list("Step_Length" = 2.7,
                 "Step_Time" = 0.025,
                 "Cycle_Time" = 0.03,
                 "Stride_length" = 2.5,
                 "Swing_time" = 0.03,
                 "Stance_time" = 0.05,
                 "Swing_phase" = 2.5,
                 "Stance_phase" = 2.5,
                 "Single_support_phase" = 2,
                 "Double_support_phase" = 3
)

df.tost.mael <- df %>%
  group_split(metric,side) %>%  # Split by group
  map_dfr(~ compute_TOST(.x, eqb_mode = "Mael"))

df.tost.mael %>% 
  mutate(across(is.numeric, ~round(.,3))) %>%
  datatable(filter = "top")
```

### Equivalence boundaries = +/- 5% of mean GAITRite values

```{r}
df.tost.5perc <- df %>%
  group_split(metric,side) %>%  # Split by group
  map_dfr(~ compute_TOST(.x, eqb_mode = 0.05))

df.tost.5perc %>% 
  mutate(across(is.numeric, ~round(.,3))) %>%
  datatable(filter = "top")
```
